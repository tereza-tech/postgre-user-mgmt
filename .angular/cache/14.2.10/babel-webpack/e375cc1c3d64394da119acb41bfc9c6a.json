{"ast":null,"code":"import PostgrestQueryBuilder from './PostgrestQueryBuilder';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nimport { DEFAULT_HEADERS } from './constants';\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\n\nexport default class PostgrestClient {\n  // TODO: Add back shouldThrowOnError once we figure out the typings\n\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url - URL of the PostgREST endpoint\n   * @param options - Named parameters\n   * @param options.headers - Custom headers\n   * @param options.schema - Postgres schema to switch to\n   * @param options.fetch - Custom fetch\n   */\n  constructor(url, {\n    headers = {},\n    schema,\n    fetch\n  } = {}) {\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schema = schema;\n    this.fetch = fetch;\n  }\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n\n\n  from(relation) {\n    const url = new URL(`${this.url}/${relation}`);\n    return new PostgrestQueryBuilder(url, {\n      headers: Object.assign({}, this.headers),\n      schema: this.schema,\n      fetch: this.fetch\n    });\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n\n\n  rpc(fn, args = {}, {\n    head = false,\n    count\n  } = {}) {\n    let method;\n    const url = new URL(`${this.url}/rpc/${fn}`);\n    let body;\n\n    if (head) {\n      method = 'HEAD';\n      Object.entries(args).forEach(([name, value]) => {\n        url.searchParams.append(name, `${value}`);\n      });\n    } else {\n      method = 'POST';\n      body = args;\n    }\n\n    const headers = Object.assign({}, this.headers);\n\n    if (count) {\n      headers['Prefer'] = `count=${count}`;\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url,\n      headers,\n      schema: this.schema,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n\n}","map":{"version":3,"names":["PostgrestQueryBuilder","PostgrestFilterBuilder","DEFAULT_HEADERS","PostgrestClient","constructor","url","headers","schema","fetch","Object","assign","from","relation","URL","rpc","fn","args","head","count","method","body","entries","forEach","name","value","searchParams","append","allowEmpty"],"sources":["/home/runner/Usrmgmt/node_modules/@supabase/postgrest-js/dist/module/PostgrestClient.js"],"sourcesContent":["import PostgrestQueryBuilder from './PostgrestQueryBuilder';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nimport { DEFAULT_HEADERS } from './constants';\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nexport default class PostgrestClient {\n    // TODO: Add back shouldThrowOnError once we figure out the typings\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url - URL of the PostgREST endpoint\n     * @param options - Named parameters\n     * @param options.headers - Custom headers\n     * @param options.schema - Postgres schema to switch to\n     * @param options.fetch - Custom fetch\n     */\n    constructor(url, { headers = {}, schema, fetch, } = {}) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.schema = schema;\n        this.fetch = fetch;\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        const url = new URL(`${this.url}/${relation}`);\n        return new PostgrestQueryBuilder(url, {\n            headers: Object.assign({}, this.headers),\n            schema: this.schema,\n            fetch: this.fetch,\n        });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, { head = false, count, } = {}) {\n        let method;\n        const url = new URL(`${this.url}/rpc/${fn}`);\n        let body;\n        if (head) {\n            method = 'HEAD';\n            Object.entries(args).forEach(([name, value]) => {\n                url.searchParams.append(name, `${value}`);\n            });\n        }\n        else {\n            method = 'POST';\n            body = args;\n        }\n        const headers = Object.assign({}, this.headers);\n        if (count) {\n            headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder({\n            method,\n            url,\n            headers,\n            schema: this.schema,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n}\n"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,eAAN,CAAsB;EACjC;;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,GAAD,EAAM;IAAEC,OAAO,GAAG,EAAZ;IAAgBC,MAAhB;IAAwBC;EAAxB,IAAmC,EAAzC,EAA6C;IACpD,KAAKH,GAAL,GAAWA,GAAX;IACA,KAAKC,OAAL,GAAeG,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,eAAlB,CAAd,EAAkDI,OAAlD,CAAf;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,KAAL,GAAaA,KAAb;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIG,IAAI,CAACC,QAAD,EAAW;IACX,MAAMP,GAAG,GAAG,IAAIQ,GAAJ,CAAS,GAAE,KAAKR,GAAI,IAAGO,QAAS,EAAhC,CAAZ;IACA,OAAO,IAAIZ,qBAAJ,CAA0BK,GAA1B,EAA+B;MAClCC,OAAO,EAAEG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKJ,OAAvB,CADyB;MAElCC,MAAM,EAAE,KAAKA,MAFqB;MAGlCC,KAAK,EAAE,KAAKA;IAHsB,CAA/B,CAAP;EAKH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIM,GAAG,CAACC,EAAD,EAAKC,IAAI,GAAG,EAAZ,EAAgB;IAAEC,IAAI,GAAG,KAAT;IAAgBC;EAAhB,IAA2B,EAA3C,EAA+C;IAC9C,IAAIC,MAAJ;IACA,MAAMd,GAAG,GAAG,IAAIQ,GAAJ,CAAS,GAAE,KAAKR,GAAI,QAAOU,EAAG,EAA9B,CAAZ;IACA,IAAIK,IAAJ;;IACA,IAAIH,IAAJ,EAAU;MACNE,MAAM,GAAG,MAAT;MACAV,MAAM,CAACY,OAAP,CAAeL,IAAf,EAAqBM,OAArB,CAA6B,CAAC,CAACC,IAAD,EAAOC,KAAP,CAAD,KAAmB;QAC5CnB,GAAG,CAACoB,YAAJ,CAAiBC,MAAjB,CAAwBH,IAAxB,EAA+B,GAAEC,KAAM,EAAvC;MACH,CAFD;IAGH,CALD,MAMK;MACDL,MAAM,GAAG,MAAT;MACAC,IAAI,GAAGJ,IAAP;IACH;;IACD,MAAMV,OAAO,GAAGG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKJ,OAAvB,CAAhB;;IACA,IAAIY,KAAJ,EAAW;MACPZ,OAAO,CAAC,QAAD,CAAP,GAAqB,SAAQY,KAAM,EAAnC;IACH;;IACD,OAAO,IAAIjB,sBAAJ,CAA2B;MAC9BkB,MAD8B;MAE9Bd,GAF8B;MAG9BC,OAH8B;MAI9BC,MAAM,EAAE,KAAKA,MAJiB;MAK9Ba,IAL8B;MAM9BZ,KAAK,EAAE,KAAKA,KANkB;MAO9BmB,UAAU,EAAE;IAPkB,CAA3B,CAAP;EASH;;AA9EgC"},"metadata":{},"sourceType":"module"}