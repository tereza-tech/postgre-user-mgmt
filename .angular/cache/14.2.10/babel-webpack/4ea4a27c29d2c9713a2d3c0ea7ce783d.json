{"ast":null,"code":"import PostgrestBuilder from './PostgrestBuilder';\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n  /**\n   * Perform a SELECT on the query result.\n   *\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n   * return modified rows. By calling this method, modified rows are returned in\n   * `data`.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   */\n  select(columns) {\n    // Remove whitespaces except when quoted\n    let quoted = false;\n    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n\n    if (this.headers['Prefer']) {\n      this.headers['Prefer'] += ',';\n    }\n\n    this.headers['Prefer'] += 'return=representation';\n    return this;\n  }\n  /**\n   * Order the query result by `column`.\n   *\n   * You can call this method multiple times to order by multiple columns.\n   *\n   * You can order foreign tables, but it doesn't affect the ordering of the\n   * current table.\n   *\n   * @param column - The column to order by\n   * @param options - Named parameters\n   * @param options.ascending - If `true`, the result will be in ascending order\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n   * `null`s appear last.\n   * @param options.foreignTable - Set this to order a foreign table by foreign\n   * columns\n   */\n\n\n  order(column, {\n    ascending = true,\n    nullsFirst,\n    foreignTable\n  } = {}) {\n    const key = foreignTable ? `${foreignTable}.order` : 'order';\n    const existingOrder = this.url.searchParams.get(key);\n    this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n    return this;\n  }\n  /**\n   * Limit the query result by `count`.\n   *\n   * @param count - The maximum number of rows to return\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n\n\n  limit(count, {\n    foreignTable\n  } = {}) {\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(key, `${count}`);\n    return this;\n  }\n  /**\n   * Limit the query result by `from` and `to` inclusively.\n   *\n   * @param from - The starting index from which to limit the result\n   * @param to - The last index to which to limit the result\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n\n\n  range(from, to, {\n    foreignTable\n  } = {}) {\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(keyOffset, `${from}`); // Range is inclusive, so add 1\n\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n    return this;\n  }\n  /**\n   * Set the AbortSignal for the fetch request.\n   *\n   * @param signal - The AbortSignal to use for the fetch request\n   */\n\n\n  abortSignal(signal) {\n    this.signal = signal;\n    return this;\n  }\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n   * returns an error.\n   */\n\n\n  single() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    return this;\n  }\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n   * this returns an error.\n   */\n\n\n  maybeSingle() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    this.allowEmpty = true;\n    return this;\n  }\n  /**\n   * Return `data` as a string in CSV format.\n   */\n\n\n  csv() {\n    this.headers['Accept'] = 'text/csv';\n    return this;\n  }\n  /**\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n   */\n\n\n  geojson() {\n    this.headers['Accept'] = 'application/geo+json';\n    return this;\n  }\n  /**\n   * Return `data` as the EXPLAIN plan for the query.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.analyze - If `true`, the query will be executed and the\n   * actual run time will be returned\n   *\n   * @param options.verbose - If `true`, the query identifier will be returned\n   * and `data` will include the output columns of the query\n   *\n   * @param options.settings - If `true`, include information on configuration\n   * parameters that affect query planning\n   *\n   * @param options.buffers - If `true`, include information on buffer usage\n   *\n   * @param options.wal - If `true`, include information on WAL record generation\n   *\n   * @param options.format - The format of the output, can be `\"text\"` (default)\n   * or `\"json\"`\n   */\n\n\n  explain({\n    analyze = false,\n    verbose = false,\n    settings = false,\n    buffers = false,\n    wal = false,\n    format = 'text'\n  } = {}) {\n    const options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|'); // An Accept header can carry multiple media types but postgrest-js always sends one\n\n    const forMediatype = this.headers['Accept'];\n    this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n    if (format === 'json') return this;else return this;\n  }\n  /**\n   * Rollback the query.\n   *\n   * `data` will still be returned, but the query is not committed.\n   */\n\n\n  rollback() {\n    var _a;\n\n    if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n      this.headers['Prefer'] += ',tx=rollback';\n    } else {\n      this.headers['Prefer'] = 'tx=rollback';\n    }\n\n    return this;\n  }\n  /**\n   * Override the type of the returned `data`.\n   *\n   * @typeParam NewResult - The new result type to override with\n   */\n\n\n  returns() {\n    return this;\n  }\n\n}","map":{"version":3,"names":["PostgrestBuilder","PostgrestTransformBuilder","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","order","column","ascending","nullsFirst","foreignTable","key","existingOrder","get","undefined","limit","count","range","from","to","keyOffset","keyLimit","abortSignal","signal","single","maybeSingle","allowEmpty","csv","geojson","explain","analyze","verbose","settings","buffers","wal","format","options","filter","Boolean","forMediatype","rollback","_a","trim","length","returns"],"sources":["/home/runner/Usrmgmt/node_modules/@supabase/postgrest-js/dist/module/PostgrestTransformBuilder.js"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder';\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n    /**\n     * Perform a SELECT on the query result.\n     *\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n     * return modified rows. By calling this method, modified rows are returned in\n     * `data`.\n     *\n     * @param columns - The columns to retrieve, separated by commas\n     */\n    select(columns) {\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (this.headers['Prefer']) {\n            this.headers['Prefer'] += ',';\n        }\n        this.headers['Prefer'] += 'return=representation';\n        return this;\n    }\n    /**\n     * Order the query result by `column`.\n     *\n     * You can call this method multiple times to order by multiple columns.\n     *\n     * You can order foreign tables, but it doesn't affect the ordering of the\n     * current table.\n     *\n     * @param column - The column to order by\n     * @param options - Named parameters\n     * @param options.ascending - If `true`, the result will be in ascending order\n     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n     * `null`s appear last.\n     * @param options.foreignTable - Set this to order a foreign table by foreign\n     * columns\n     */\n    order(column, { ascending = true, nullsFirst, foreignTable, } = {}) {\n        const key = foreignTable ? `${foreignTable}.order` : 'order';\n        const existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n        return this;\n    }\n    /**\n     * Limit the query result by `count`.\n     *\n     * @param count - The maximum number of rows to return\n     * @param options - Named parameters\n     * @param options.foreignTable - Set this to limit rows of foreign tables\n     * instead of the current table\n     */\n    limit(count, { foreignTable } = {}) {\n        const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n    }\n    /**\n     * Limit the query result by `from` and `to` inclusively.\n     *\n     * @param from - The starting index from which to limit the result\n     * @param to - The last index to which to limit the result\n     * @param options - Named parameters\n     * @param options.foreignTable - Set this to limit rows of foreign tables\n     * instead of the current table\n     */\n    range(from, to, { foreignTable } = {}) {\n        const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n        const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n    }\n    /**\n     * Set the AbortSignal for the fetch request.\n     *\n     * @param signal - The AbortSignal to use for the fetch request\n     */\n    abortSignal(signal) {\n        this.signal = signal;\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n     * returns an error.\n     */\n    single() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n     * this returns an error.\n     */\n    maybeSingle() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        this.allowEmpty = true;\n        return this;\n    }\n    /**\n     * Return `data` as a string in CSV format.\n     */\n    csv() {\n        this.headers['Accept'] = 'text/csv';\n        return this;\n    }\n    /**\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n     */\n    geojson() {\n        this.headers['Accept'] = 'application/geo+json';\n        return this;\n    }\n    /**\n     * Return `data` as the EXPLAIN plan for the query.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.analyze - If `true`, the query will be executed and the\n     * actual run time will be returned\n     *\n     * @param options.verbose - If `true`, the query identifier will be returned\n     * and `data` will include the output columns of the query\n     *\n     * @param options.settings - If `true`, include information on configuration\n     * parameters that affect query planning\n     *\n     * @param options.buffers - If `true`, include information on buffer usage\n     *\n     * @param options.wal - If `true`, include information on WAL record generation\n     *\n     * @param options.format - The format of the output, can be `\"text\"` (default)\n     * or `\"json\"`\n     */\n    explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = 'text', } = {}) {\n        const options = [\n            analyze ? 'analyze' : null,\n            verbose ? 'verbose' : null,\n            settings ? 'settings' : null,\n            buffers ? 'buffers' : null,\n            wal ? 'wal' : null,\n        ]\n            .filter(Boolean)\n            .join('|');\n        // An Accept header can carry multiple media types but postgrest-js always sends one\n        const forMediatype = this.headers['Accept'];\n        this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n        if (format === 'json')\n            return this;\n        else\n            return this;\n    }\n    /**\n     * Rollback the query.\n     *\n     * `data` will still be returned, but the query is not committed.\n     */\n    rollback() {\n        var _a;\n        if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n            this.headers['Prefer'] += ',tx=rollback';\n        }\n        else {\n            this.headers['Prefer'] = 'tx=rollback';\n        }\n        return this;\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     */\n    returns() {\n        return this;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}