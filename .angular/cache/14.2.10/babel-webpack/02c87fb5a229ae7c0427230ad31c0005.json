{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nconst DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS\n};\nconst DEFAULT_DB_OPTIONS = {\n  schema: 'public'\n};\nconst DEFAULT_AUTH_OPTIONS = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true\n};\nconst DEFAULT_REALTIME_OPTIONS = {};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\n\nexport default class SupabaseClient {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(supabaseUrl, supabaseKey, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\n    this.authUrl = `${_supabaseUrl}/auth/v1`;\n    this.storageUrl = `${_supabaseUrl}/storage/v1`;\n\n    const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/);\n\n    if (isPlatform) {\n      const urlParts = _supabaseUrl.split('.');\n\n      this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`;\n    } else {\n      this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n    } // default storage key uses the supabase project ref as a namespace\n\n\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), {\n        storageKey: defaultStorageKey\n      }),\n      global: DEFAULT_GLOBAL_OPTIONS\n    };\n    const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n    this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n    this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n    this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n      headers: this.headers,\n      schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n      fetch: this.fetch\n    });\n\n    this._listenForAuthEvents();\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n\n\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch\n    });\n  }\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n\n\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n  }\n\n  from(relation) {\n    return this.rest.from(relation);\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param args  The parameters to pass to the function call.\n   * @param options.head   When set to true, no data will be returned.\n   * @param options.count  Count algorithm to use to count rows in a table.\n   *\n   */\n\n\n  rpc(fn, args = {}, options) {\n    return this.rest.rpc(fn, args, options);\n  }\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n\n\n  channel(name, opts = {\n    config: {}\n  }) {\n    return this.realtime.channel(name, opts);\n  }\n  /**\n   * Returns all Realtime channels.\n   */\n\n\n  getChannels() {\n    return this.realtime.getChannels();\n  }\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n\n\n  removeChannel(channel) {\n    return this.realtime.removeChannel(channel);\n  }\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n\n\n  removeAllChannels() {\n    return this.realtime.removeAllChannels();\n  }\n\n  _getAccessToken() {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data\n      } = yield this.auth.getSession();\n      return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n    });\n  }\n\n  _initSupabaseAuthClient({\n    autoRefreshToken,\n    persistSession,\n    detectSessionInUrl,\n    storage,\n    storageKey\n  }, headers, fetch) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`\n    };\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: Object.assign(Object.assign({}, authHeaders), headers),\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      fetch\n    });\n  }\n\n  _initRealtimeClient(options) {\n    return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n      params: Object.assign({\n        apikey: this.supabaseKey\n      }, options === null || options === void 0 ? void 0 : options.params)\n    }));\n  }\n\n  _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n    });\n    return data;\n  }\n\n  _handleTokenChanged(event, token, source) {\n    if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n      // Token has changed\n      this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n      this.changedAccessToken = token;\n    } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey);\n      if (source == 'STORAGE') this.auth.signOut();\n    }\n  }\n\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","FunctionsClient","PostgrestClient","RealtimeClient","StorageClient","SupabaseStorageClient","DEFAULT_HEADERS","fetchWithAuth","stripTrailingSlash","applySettingDefaults","SupabaseAuthClient","DEFAULT_GLOBAL_OPTIONS","headers","DEFAULT_DB_OPTIONS","schema","DEFAULT_AUTH_OPTIONS","autoRefreshToken","persistSession","detectSessionInUrl","DEFAULT_REALTIME_OPTIONS","SupabaseClient","constructor","supabaseUrl","supabaseKey","options","_a","_b","_c","_d","_e","_f","_g","_h","Error","_supabaseUrl","realtimeUrl","replace","authUrl","storageUrl","isPlatform","match","urlParts","split","functionsUrl","defaultStorageKey","URL","hostname","DEFAULTS","db","realtime","auth","Object","assign","storageKey","global","settings","_initSupabaseAuthClient","fetch","_getAccessToken","bind","_initRealtimeClient","rest","_listenForAuthEvents","functions","customFetch","storage","from","relation","rpc","fn","args","channel","name","opts","config","getChannels","removeChannel","removeAllChannels","data","getSession","session","access_token","authHeaders","Authorization","apikey","url","params","onAuthStateChange","event","_handleTokenChanged","token","source","changedAccessToken","setAuth","signOut"],"sources":["/home/runner/Usrmgmt/node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient, } from '@supabase/postgrest-js';\nimport { RealtimeClient, } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nconst DEFAULT_GLOBAL_OPTIONS = {\n    headers: DEFAULT_HEADERS,\n};\nconst DEFAULT_DB_OPTIONS = {\n    schema: 'public',\n};\nconst DEFAULT_AUTH_OPTIONS = {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n};\nconst DEFAULT_REALTIME_OPTIONS = {};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.global.fetch A custom fetch implementation.\n     * @param options.global.headers Any additional headers to send with each network request.\n     */\n    constructor(supabaseUrl, supabaseKey, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        this.supabaseUrl = supabaseUrl;\n        this.supabaseKey = supabaseKey;\n        if (!supabaseUrl)\n            throw new Error('supabaseUrl is required.');\n        if (!supabaseKey)\n            throw new Error('supabaseKey is required.');\n        const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n        this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\n        this.authUrl = `${_supabaseUrl}/auth/v1`;\n        this.storageUrl = `${_supabaseUrl}/storage/v1`;\n        const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/);\n        if (isPlatform) {\n            const urlParts = _supabaseUrl.split('.');\n            this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`;\n        }\n        else {\n            this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n        }\n        // default storage key uses the supabase project ref as a namespace\n        const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\n        const DEFAULTS = {\n            db: DEFAULT_DB_OPTIONS,\n            realtime: DEFAULT_REALTIME_OPTIONS,\n            auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),\n            global: DEFAULT_GLOBAL_OPTIONS,\n        };\n        const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n        this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n        this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n        this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n        this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers }, settings.realtime));\n        this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n            headers: this.headers,\n            schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n            fetch: this.fetch,\n        });\n        this._listenForAuthEvents();\n    }\n    /**\n     * Supabase Functions allows you to deploy and invoke edge functions.\n     */\n    get functions() {\n        return new FunctionsClient(this.functionsUrl, {\n            headers: this.headers,\n            customFetch: this.fetch,\n        });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n    get storage() {\n        return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n    from(relation) {\n        return this.rest.from(relation);\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param args  The parameters to pass to the function call.\n     * @param options.head   When set to true, no data will be returned.\n     * @param options.count  Count algorithm to use to count rows in a table.\n     *\n     */\n    rpc(fn, args = {}, options) {\n        return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n    channel(name, opts = { config: {} }) {\n        return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n    getChannels() {\n        return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n    removeChannel(channel) {\n        return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n    removeAllChannels() {\n        return this.realtime.removeAllChannels();\n    }\n    _getAccessToken() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { data } = yield this.auth.getSession();\n            return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n        });\n    }\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, }, headers, fetch) {\n        const authHeaders = {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            apikey: `${this.supabaseKey}`,\n        };\n        return new SupabaseAuthClient({\n            url: this.authUrl,\n            headers: Object.assign(Object.assign({}, authHeaders), headers),\n            storageKey: storageKey,\n            autoRefreshToken,\n            persistSession,\n            detectSessionInUrl,\n            storage,\n            fetch,\n        });\n    }\n    _initRealtimeClient(options) {\n        return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));\n    }\n    _listenForAuthEvents() {\n        let data = this.auth.onAuthStateChange((event, session) => {\n            this._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n        });\n        return data;\n    }\n    _handleTokenChanged(event, token, source) {\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n            this.changedAccessToken !== token) {\n            // Token has changed\n            this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n            this.changedAccessToken = token;\n        }\n        else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n            // Token is removed\n            this.realtime.setAuth(this.supabaseKey);\n            if (source == 'STORAGE')\n                this.auth.signOut();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}