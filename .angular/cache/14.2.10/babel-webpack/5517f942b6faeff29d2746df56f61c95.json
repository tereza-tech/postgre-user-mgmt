{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { isStorageError } from '../lib/errors';\nimport { get, post, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nconst DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport default class StorageFileApi {\n  constructor(url, headers = {}, bucketId, fetch) {\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n\n\n  uploadOrUpdate(method, path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n          'x-upsert': String(options.upsert)\n        });\n\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n\n        const cleanPath = this._removeEmptyFolders(path);\n\n        const _path = this._getFinalPath(cleanPath);\n\n        const res = yield this.fetch(`${this.url}/object/${_path}`, {\n          method,\n          body: body,\n          headers\n        });\n\n        if (res.ok) {\n          return {\n            data: {\n              path: cleanPath\n            },\n            error: null\n          };\n        } else {\n          const error = yield res.json();\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n\n\n  upload(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n\n\n  update(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Moves an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n\n\n  move(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/move`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Copies an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n\n\n  copy(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/copy`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: {\n            path: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n\n\n  createSignedUrl(path, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n\n        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n          expiresIn\n        }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n          transform: options.transform\n        } : {}), {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n        data = {\n          signedUrl\n        };\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n\n\n  createSignedUrls(paths, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n          expiresIn,\n          paths\n        }, {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        return {\n          data: data.map(datum => Object.assign(Object.assign({}, datum), {\n            signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n          })),\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Downloads a file.\n   *\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n\n\n  download(path, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      const queryString = transformationQuery ? `?${transformationQuery}` : '';\n\n      try {\n        const _path = this._getFinalPath(path);\n\n        const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n          headers: this.headers,\n          noResolveJson: true\n        });\n        const data = yield res.blob();\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the URL for an asset in a public bucket.\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n   *\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n\n\n  getPublicUrl(path, options) {\n    const _path = this._getFinalPath(path);\n\n    const _queryString = [];\n    const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam);\n    }\n\n    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n    const renderPath = wantsTransformation ? 'render/image' : 'object';\n    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery);\n    }\n\n    let queryString = _queryString.join('&');\n\n    if (queryString !== '') {\n      queryString = `?${queryString}`;\n    }\n\n    return {\n      data: {\n        publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n      }\n    };\n  }\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n   */\n\n\n  remove(paths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, {\n          prefixes: paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   */\n\n\n  list(path, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n          prefix: path || ''\n        });\n        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _getFinalPath(path) {\n    return `${this.bucketId}/${path}`;\n  }\n\n  _removeEmptyFolders(path) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n  }\n\n  transformOptsToQueryString(transform) {\n    const params = [];\n\n    if (transform.width) {\n      params.push(`width=${transform.width}`);\n    }\n\n    if (transform.height) {\n      params.push(`height=${transform.height}`);\n    }\n\n    if (transform.resize) {\n      params.push(`resize=${transform.resize}`);\n    }\n\n    return params.join('&');\n  }\n\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","isStorageError","get","post","remove","resolveFetch","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","constructor","url","headers","bucketId","fetch","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","Object","assign","String","Blob","FormData","append","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","ok","data","error","json","upload","update","move","fromPath","toPath","sourceKey","destinationKey","copy","Key","createSignedUrl","expiresIn","transform","downloadQueryParam","download","signedUrl","encodeURI","signedURL","createSignedUrls","paths","map","datum","wantsTransformation","renderPath","transformationQuery","transformOptsToQueryString","queryString","noResolveJson","blob","getPublicUrl","_queryString","push","join","publicUrl","prefixes","list","parameters","prefix","replace","params","width","height","resize"],"sources":["/home/runner/Usrmgmt/node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isStorageError } from '../lib/errors';\nimport { get, post, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n        column: 'name',\n        order: 'asc',\n    },\n};\nconst DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false,\n};\nexport default class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n        this.url = url;\n        this.headers = headers;\n        this.bucketId = bucketId;\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const cleanPath = this._removeEmptyFolders(path);\n                const _path = this._getFinalPath(cleanPath);\n                const res = yield this.fetch(`${this.url}/object/${_path}`, {\n                    method,\n                    body: body,\n                    headers,\n                });\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = yield res.json();\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     */\n    move(fromPath, toPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/move`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n    copy(fromPath, toPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/copy`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\n                return { data: { path: data.Key }, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, ((options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {})), { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n                data = { signedUrl };\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                return {\n                    data: data.map((datum) => (Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL\n                            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n                            : null }))),\n                    error: null,\n                };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Downloads a file.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n            const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n            const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n            const queryString = transformationQuery ? `?${transformationQuery}` : '';\n            try {\n                const _path = this._getFinalPath(path);\n                const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n                    headers: this.headers,\n                    noResolveJson: true,\n                });\n                const data = yield res.blob();\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the URL for an asset in a public bucket.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n        const _path = this._getFinalPath(path);\n        const _queryString = [];\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n            ? `download=${options.download === true ? '' : options.download}`\n            : '';\n        if (downloadQueryParam !== '') {\n            _queryString.push(downloadQueryParam);\n        }\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        const renderPath = wantsTransformation ? 'render/image' : 'object';\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n            _queryString.push(transformationQuery);\n        }\n        let queryString = _queryString.join('&');\n        if (queryString !== '') {\n            queryString = `?${queryString}`;\n        }\n        return {\n            data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n        };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     */\n    list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\n                const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    _getFinalPath(path) {\n        return `${this.bucketId}/${path}`;\n    }\n    _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n        const params = [];\n        if (transform.width) {\n            params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n            params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n            params.push(`resize=${transform.resize}`);\n        }\n        return params.join('&');\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}