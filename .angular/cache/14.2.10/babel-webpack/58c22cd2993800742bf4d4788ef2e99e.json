{"ast":null,"code":"/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\n\nexport default class RealtimePresence {\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(channel, opts) {\n    this.channel = channel;\n    this.state = {};\n    this.pendingDiffs = [];\n    this.joinRef = null;\n    this.caller = {\n      onJoin: () => {},\n      onLeave: () => {},\n      onSync: () => {}\n    };\n    const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n      state: 'presence_state',\n      diff: 'presence_diff'\n    };\n\n    this.channel._on(events.state, {}, newState => {\n      const {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n      this.joinRef = this.channel._joinRef();\n      this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n      this.pendingDiffs.forEach(diff => {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n      });\n      this.pendingDiffs = [];\n      onSync();\n    });\n\n    this.channel._on(events.diff, {}, diff => {\n      const {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff);\n      } else {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n        onSync();\n      }\n    });\n\n    this.onJoin((key, currentPresences, newPresences) => {\n      this.channel._trigger('presence', {\n        event: 'join',\n        key,\n        currentPresences,\n        newPresences\n      });\n    });\n    this.onLeave((key, currentPresences, leftPresences) => {\n      this.channel._trigger('presence', {\n        event: 'leave',\n        key,\n        currentPresences,\n        leftPresences\n      });\n    });\n    this.onSync(() => {\n      this.channel._trigger('presence', {\n        event: 'sync'\n      });\n    });\n  }\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n\n\n  static syncState(currentState, newState, onJoin, onLeave) {\n    const state = this.cloneDeep(currentState);\n    const transformedState = this.transformState(newState);\n    const joins = {};\n    const leaves = {};\n    this.map(state, (key, presences) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences;\n      }\n    });\n    this.map(transformedState, (key, newPresences) => {\n      const currentPresences = state[key];\n\n      if (currentPresences) {\n        const newPresenceRefs = newPresences.map(m => m.presence_ref);\n        const curPresenceRefs = currentPresences.map(m => m.presence_ref);\n        const joinedPresences = newPresences.filter(m => curPresenceRefs.indexOf(m.presence_ref) < 0);\n        const leftPresences = currentPresences.filter(m => newPresenceRefs.indexOf(m.presence_ref) < 0);\n\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences;\n        }\n\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences;\n        }\n      } else {\n        joins[key] = newPresences;\n      }\n    });\n    return this.syncDiff(state, {\n      joins,\n      leaves\n    }, onJoin, onLeave);\n  }\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   *\n   * @internal\n   */\n\n\n  static syncDiff(state, diff, onJoin, onLeave) {\n    const {\n      joins,\n      leaves\n    } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves)\n    };\n\n    if (!onJoin) {\n      onJoin = () => {};\n    }\n\n    if (!onLeave) {\n      onLeave = () => {};\n    }\n\n    this.map(joins, (key, newPresences) => {\n      var _a;\n\n      const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n      state[key] = this.cloneDeep(newPresences);\n\n      if (currentPresences.length > 0) {\n        const joinedPresenceRefs = state[key].map(m => m.presence_ref);\n        const curPresences = currentPresences.filter(m => joinedPresenceRefs.indexOf(m.presence_ref) < 0);\n        state[key].unshift(...curPresences);\n      }\n\n      onJoin(key, currentPresences, newPresences);\n    });\n    this.map(leaves, (key, leftPresences) => {\n      let currentPresences = state[key];\n      if (!currentPresences) return;\n      const presenceRefsToRemove = leftPresences.map(m => m.presence_ref);\n      currentPresences = currentPresences.filter(m => presenceRefsToRemove.indexOf(m.presence_ref) < 0);\n      state[key] = currentPresences;\n      onLeave(key, currentPresences, leftPresences);\n      if (currentPresences.length === 0) delete state[key];\n    });\n    return state;\n  }\n  /** @internal */\n\n\n  static map(obj, func) {\n    return Object.getOwnPropertyNames(obj).map(key => func(key, obj[key]));\n  }\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_ref'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_ref: '2', user_id: 1 },\n   *    { presence_ref: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   *\n   * @internal\n   */\n\n\n  static transformState(state) {\n    state = this.cloneDeep(state);\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key];\n\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map(presence => {\n          presence['presence_ref'] = presence['phx_ref'];\n          delete presence['phx_ref'];\n          delete presence['phx_ref_prev'];\n          return presence;\n        });\n      } else {\n        newState[key] = presences;\n      }\n\n      return newState;\n    }, {});\n  }\n  /** @internal */\n\n\n  static cloneDeep(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n  /** @internal */\n\n\n  onJoin(callback) {\n    this.caller.onJoin = callback;\n  }\n  /** @internal */\n\n\n  onLeave(callback) {\n    this.caller.onLeave = callback;\n  }\n  /** @internal */\n\n\n  onSync(callback) {\n    this.caller.onSync = callback;\n  }\n  /** @internal */\n\n\n  inPendingSyncState() {\n    return !this.joinRef || this.joinRef !== this.channel._joinRef();\n  }\n\n}","map":{"version":3,"names":["REALTIME_PRESENCE_LISTEN_EVENTS","RealtimePresence","constructor","channel","opts","state","pendingDiffs","joinRef","caller","onJoin","onLeave","onSync","events","diff","_on","newState","_joinRef","syncState","forEach","syncDiff","inPendingSyncState","push","key","currentPresences","newPresences","_trigger","event","leftPresences","currentState","cloneDeep","transformedState","transformState","joins","leaves","map","presences","newPresenceRefs","m","presence_ref","curPresenceRefs","joinedPresences","filter","indexOf","length","_a","joinedPresenceRefs","curPresences","unshift","presenceRefsToRemove","obj","func","Object","getOwnPropertyNames","reduce","metas","presence","JSON","parse","stringify","callback"],"sources":["/home/runner/Usrmgmt/node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js"],"sourcesContent":["/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\nexport default class RealtimePresence {\n    /**\n     * Initializes the Presence.\n     *\n     * @param channel - The RealtimeChannel\n     * @param opts - The options,\n     *        for example `{events: {state: 'state', diff: 'diff'}}`\n     */\n    constructor(channel, opts) {\n        this.channel = channel;\n        this.state = {};\n        this.pendingDiffs = [];\n        this.joinRef = null;\n        this.caller = {\n            onJoin: () => { },\n            onLeave: () => { },\n            onSync: () => { },\n        };\n        const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n            state: 'presence_state',\n            diff: 'presence_diff',\n        };\n        this.channel._on(events.state, {}, (newState) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            this.joinRef = this.channel._joinRef();\n            this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n            this.pendingDiffs.forEach((diff) => {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n            });\n            this.pendingDiffs = [];\n            onSync();\n        });\n        this.channel._on(events.diff, {}, (diff) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            if (this.inPendingSyncState()) {\n                this.pendingDiffs.push(diff);\n            }\n            else {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n                onSync();\n            }\n        });\n        this.onJoin((key, currentPresences, newPresences) => {\n            this.channel._trigger('presence', {\n                event: 'join',\n                key,\n                currentPresences,\n                newPresences,\n            });\n        });\n        this.onLeave((key, currentPresences, leftPresences) => {\n            this.channel._trigger('presence', {\n                event: 'leave',\n                key,\n                currentPresences,\n                leftPresences,\n            });\n        });\n        this.onSync(() => {\n            this.channel._trigger('presence', { event: 'sync' });\n        });\n    }\n    /**\n     * Used to sync the list of presences on the server with the\n     * client's state.\n     *\n     * An optional `onJoin` and `onLeave` callback can be provided to\n     * react to changes in the client's local presences across\n     * disconnects and reconnects with the server.\n     *\n     * @internal\n     */\n    static syncState(currentState, newState, onJoin, onLeave) {\n        const state = this.cloneDeep(currentState);\n        const transformedState = this.transformState(newState);\n        const joins = {};\n        const leaves = {};\n        this.map(state, (key, presences) => {\n            if (!transformedState[key]) {\n                leaves[key] = presences;\n            }\n        });\n        this.map(transformedState, (key, newPresences) => {\n            const currentPresences = state[key];\n            if (currentPresences) {\n                const newPresenceRefs = newPresences.map((m) => m.presence_ref);\n                const curPresenceRefs = currentPresences.map((m) => m.presence_ref);\n                const joinedPresences = newPresences.filter((m) => curPresenceRefs.indexOf(m.presence_ref) < 0);\n                const leftPresences = currentPresences.filter((m) => newPresenceRefs.indexOf(m.presence_ref) < 0);\n                if (joinedPresences.length > 0) {\n                    joins[key] = joinedPresences;\n                }\n                if (leftPresences.length > 0) {\n                    leaves[key] = leftPresences;\n                }\n            }\n            else {\n                joins[key] = newPresences;\n            }\n        });\n        return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     *\n     * @internal\n     */\n    static syncDiff(state, diff, onJoin, onLeave) {\n        const { joins, leaves } = {\n            joins: this.transformState(diff.joins),\n            leaves: this.transformState(diff.leaves),\n        };\n        if (!onJoin) {\n            onJoin = () => { };\n        }\n        if (!onLeave) {\n            onLeave = () => { };\n        }\n        this.map(joins, (key, newPresences) => {\n            var _a;\n            const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n            state[key] = this.cloneDeep(newPresences);\n            if (currentPresences.length > 0) {\n                const joinedPresenceRefs = state[key].map((m) => m.presence_ref);\n                const curPresences = currentPresences.filter((m) => joinedPresenceRefs.indexOf(m.presence_ref) < 0);\n                state[key].unshift(...curPresences);\n            }\n            onJoin(key, currentPresences, newPresences);\n        });\n        this.map(leaves, (key, leftPresences) => {\n            let currentPresences = state[key];\n            if (!currentPresences)\n                return;\n            const presenceRefsToRemove = leftPresences.map((m) => m.presence_ref);\n            currentPresences = currentPresences.filter((m) => presenceRefsToRemove.indexOf(m.presence_ref) < 0);\n            state[key] = currentPresences;\n            onLeave(key, currentPresences, leftPresences);\n            if (currentPresences.length === 0)\n                delete state[key];\n        });\n        return state;\n    }\n    /** @internal */\n    static map(obj, func) {\n        return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_ref'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_ref: '2', user_id: 1 },\n     *    { presence_ref: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     *\n     * @internal\n     */\n    static transformState(state) {\n        state = this.cloneDeep(state);\n        return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n            const presences = state[key];\n            if ('metas' in presences) {\n                newState[key] = presences.metas.map((presence) => {\n                    presence['presence_ref'] = presence['phx_ref'];\n                    delete presence['phx_ref'];\n                    delete presence['phx_ref_prev'];\n                    return presence;\n                });\n            }\n            else {\n                newState[key] = presences;\n            }\n            return newState;\n        }, {});\n    }\n    /** @internal */\n    static cloneDeep(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    /** @internal */\n    onJoin(callback) {\n        this.caller.onJoin = callback;\n    }\n    /** @internal */\n    onLeave(callback) {\n        this.caller.onLeave = callback;\n    }\n    /** @internal */\n    onSync(callback) {\n        this.caller.onSync = callback;\n    }\n    /** @internal */\n    inPendingSyncState() {\n        return !this.joinRef || this.joinRef !== this.channel._joinRef();\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,IAAIA,+BAAJ;;AACP,CAAC,UAAUA,+BAAV,EAA2C;EACxCA,+BAA+B,CAAC,MAAD,CAA/B,GAA0C,MAA1C;EACAA,+BAA+B,CAAC,MAAD,CAA/B,GAA0C,MAA1C;EACAA,+BAA+B,CAAC,OAAD,CAA/B,GAA2C,OAA3C;AACH,CAJD,EAIGA,+BAA+B,KAAKA,+BAA+B,GAAG,EAAvC,CAJlC;;AAKA,eAAe,MAAMC,gBAAN,CAAuB;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgB;IACvB,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKE,KAAL,GAAa,EAAb;IACA,KAAKC,YAAL,GAAoB,EAApB;IACA,KAAKC,OAAL,GAAe,IAAf;IACA,KAAKC,MAAL,GAAc;MACVC,MAAM,EAAE,MAAM,CAAG,CADP;MAEVC,OAAO,EAAE,MAAM,CAAG,CAFR;MAGVC,MAAM,EAAE,MAAM,CAAG;IAHP,CAAd;IAKA,MAAMC,MAAM,GAAG,CAACR,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACQ,MAAlD,KAA6D;MACxEP,KAAK,EAAE,gBADiE;MAExEQ,IAAI,EAAE;IAFkE,CAA5E;;IAIA,KAAKV,OAAL,CAAaW,GAAb,CAAiBF,MAAM,CAACP,KAAxB,EAA+B,EAA/B,EAAoCU,QAAD,IAAc;MAC7C,MAAM;QAAEN,MAAF;QAAUC,OAAV;QAAmBC;MAAnB,IAA8B,KAAKH,MAAzC;MACA,KAAKD,OAAL,GAAe,KAAKJ,OAAL,CAAaa,QAAb,EAAf;MACA,KAAKX,KAAL,GAAaJ,gBAAgB,CAACgB,SAAjB,CAA2B,KAAKZ,KAAhC,EAAuCU,QAAvC,EAAiDN,MAAjD,EAAyDC,OAAzD,CAAb;MACA,KAAKJ,YAAL,CAAkBY,OAAlB,CAA2BL,IAAD,IAAU;QAChC,KAAKR,KAAL,GAAaJ,gBAAgB,CAACkB,QAAjB,CAA0B,KAAKd,KAA/B,EAAsCQ,IAAtC,EAA4CJ,MAA5C,EAAoDC,OAApD,CAAb;MACH,CAFD;MAGA,KAAKJ,YAAL,GAAoB,EAApB;MACAK,MAAM;IACT,CATD;;IAUA,KAAKR,OAAL,CAAaW,GAAb,CAAiBF,MAAM,CAACC,IAAxB,EAA8B,EAA9B,EAAmCA,IAAD,IAAU;MACxC,MAAM;QAAEJ,MAAF;QAAUC,OAAV;QAAmBC;MAAnB,IAA8B,KAAKH,MAAzC;;MACA,IAAI,KAAKY,kBAAL,EAAJ,EAA+B;QAC3B,KAAKd,YAAL,CAAkBe,IAAlB,CAAuBR,IAAvB;MACH,CAFD,MAGK;QACD,KAAKR,KAAL,GAAaJ,gBAAgB,CAACkB,QAAjB,CAA0B,KAAKd,KAA/B,EAAsCQ,IAAtC,EAA4CJ,MAA5C,EAAoDC,OAApD,CAAb;QACAC,MAAM;MACT;IACJ,CATD;;IAUA,KAAKF,MAAL,CAAY,CAACa,GAAD,EAAMC,gBAAN,EAAwBC,YAAxB,KAAyC;MACjD,KAAKrB,OAAL,CAAasB,QAAb,CAAsB,UAAtB,EAAkC;QAC9BC,KAAK,EAAE,MADuB;QAE9BJ,GAF8B;QAG9BC,gBAH8B;QAI9BC;MAJ8B,CAAlC;IAMH,CAPD;IAQA,KAAKd,OAAL,CAAa,CAACY,GAAD,EAAMC,gBAAN,EAAwBI,aAAxB,KAA0C;MACnD,KAAKxB,OAAL,CAAasB,QAAb,CAAsB,UAAtB,EAAkC;QAC9BC,KAAK,EAAE,OADuB;QAE9BJ,GAF8B;QAG9BC,gBAH8B;QAI9BI;MAJ8B,CAAlC;IAMH,CAPD;IAQA,KAAKhB,MAAL,CAAY,MAAM;MACd,KAAKR,OAAL,CAAasB,QAAb,CAAsB,UAAtB,EAAkC;QAAEC,KAAK,EAAE;MAAT,CAAlC;IACH,CAFD;EAGH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACoB,OAATT,SAAS,CAACW,YAAD,EAAeb,QAAf,EAAyBN,MAAzB,EAAiCC,OAAjC,EAA0C;IACtD,MAAML,KAAK,GAAG,KAAKwB,SAAL,CAAeD,YAAf,CAAd;IACA,MAAME,gBAAgB,GAAG,KAAKC,cAAL,CAAoBhB,QAApB,CAAzB;IACA,MAAMiB,KAAK,GAAG,EAAd;IACA,MAAMC,MAAM,GAAG,EAAf;IACA,KAAKC,GAAL,CAAS7B,KAAT,EAAgB,CAACiB,GAAD,EAAMa,SAAN,KAAoB;MAChC,IAAI,CAACL,gBAAgB,CAACR,GAAD,CAArB,EAA4B;QACxBW,MAAM,CAACX,GAAD,CAAN,GAAca,SAAd;MACH;IACJ,CAJD;IAKA,KAAKD,GAAL,CAASJ,gBAAT,EAA2B,CAACR,GAAD,EAAME,YAAN,KAAuB;MAC9C,MAAMD,gBAAgB,GAAGlB,KAAK,CAACiB,GAAD,CAA9B;;MACA,IAAIC,gBAAJ,EAAsB;QAClB,MAAMa,eAAe,GAAGZ,YAAY,CAACU,GAAb,CAAkBG,CAAD,IAAOA,CAAC,CAACC,YAA1B,CAAxB;QACA,MAAMC,eAAe,GAAGhB,gBAAgB,CAACW,GAAjB,CAAsBG,CAAD,IAAOA,CAAC,CAACC,YAA9B,CAAxB;QACA,MAAME,eAAe,GAAGhB,YAAY,CAACiB,MAAb,CAAqBJ,CAAD,IAAOE,eAAe,CAACG,OAAhB,CAAwBL,CAAC,CAACC,YAA1B,IAA0C,CAArE,CAAxB;QACA,MAAMX,aAAa,GAAGJ,gBAAgB,CAACkB,MAAjB,CAAyBJ,CAAD,IAAOD,eAAe,CAACM,OAAhB,CAAwBL,CAAC,CAACC,YAA1B,IAA0C,CAAzE,CAAtB;;QACA,IAAIE,eAAe,CAACG,MAAhB,GAAyB,CAA7B,EAAgC;UAC5BX,KAAK,CAACV,GAAD,CAAL,GAAakB,eAAb;QACH;;QACD,IAAIb,aAAa,CAACgB,MAAd,GAAuB,CAA3B,EAA8B;UAC1BV,MAAM,CAACX,GAAD,CAAN,GAAcK,aAAd;QACH;MACJ,CAXD,MAYK;QACDK,KAAK,CAACV,GAAD,CAAL,GAAaE,YAAb;MACH;IACJ,CAjBD;IAkBA,OAAO,KAAKL,QAAL,CAAcd,KAAd,EAAqB;MAAE2B,KAAF;MAASC;IAAT,CAArB,EAAwCxB,MAAxC,EAAgDC,OAAhD,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACmB,OAARS,QAAQ,CAACd,KAAD,EAAQQ,IAAR,EAAcJ,MAAd,EAAsBC,OAAtB,EAA+B;IAC1C,MAAM;MAAEsB,KAAF;MAASC;IAAT,IAAoB;MACtBD,KAAK,EAAE,KAAKD,cAAL,CAAoBlB,IAAI,CAACmB,KAAzB,CADe;MAEtBC,MAAM,EAAE,KAAKF,cAAL,CAAoBlB,IAAI,CAACoB,MAAzB;IAFc,CAA1B;;IAIA,IAAI,CAACxB,MAAL,EAAa;MACTA,MAAM,GAAG,MAAM,CAAG,CAAlB;IACH;;IACD,IAAI,CAACC,OAAL,EAAc;MACVA,OAAO,GAAG,MAAM,CAAG,CAAnB;IACH;;IACD,KAAKwB,GAAL,CAASF,KAAT,EAAgB,CAACV,GAAD,EAAME,YAAN,KAAuB;MACnC,IAAIoB,EAAJ;;MACA,MAAMrB,gBAAgB,GAAG,CAACqB,EAAE,GAAGvC,KAAK,CAACiB,GAAD,CAAX,MAAsB,IAAtB,IAA8BsB,EAAE,KAAK,KAAK,CAA1C,GAA8CA,EAA9C,GAAmD,EAA5E;MACAvC,KAAK,CAACiB,GAAD,CAAL,GAAa,KAAKO,SAAL,CAAeL,YAAf,CAAb;;MACA,IAAID,gBAAgB,CAACoB,MAAjB,GAA0B,CAA9B,EAAiC;QAC7B,MAAME,kBAAkB,GAAGxC,KAAK,CAACiB,GAAD,CAAL,CAAWY,GAAX,CAAgBG,CAAD,IAAOA,CAAC,CAACC,YAAxB,CAA3B;QACA,MAAMQ,YAAY,GAAGvB,gBAAgB,CAACkB,MAAjB,CAAyBJ,CAAD,IAAOQ,kBAAkB,CAACH,OAAnB,CAA2BL,CAAC,CAACC,YAA7B,IAA6C,CAA5E,CAArB;QACAjC,KAAK,CAACiB,GAAD,CAAL,CAAWyB,OAAX,CAAmB,GAAGD,YAAtB;MACH;;MACDrC,MAAM,CAACa,GAAD,EAAMC,gBAAN,EAAwBC,YAAxB,CAAN;IACH,CAVD;IAWA,KAAKU,GAAL,CAASD,MAAT,EAAiB,CAACX,GAAD,EAAMK,aAAN,KAAwB;MACrC,IAAIJ,gBAAgB,GAAGlB,KAAK,CAACiB,GAAD,CAA5B;MACA,IAAI,CAACC,gBAAL,EACI;MACJ,MAAMyB,oBAAoB,GAAGrB,aAAa,CAACO,GAAd,CAAmBG,CAAD,IAAOA,CAAC,CAACC,YAA3B,CAA7B;MACAf,gBAAgB,GAAGA,gBAAgB,CAACkB,MAAjB,CAAyBJ,CAAD,IAAOW,oBAAoB,CAACN,OAArB,CAA6BL,CAAC,CAACC,YAA/B,IAA+C,CAA9E,CAAnB;MACAjC,KAAK,CAACiB,GAAD,CAAL,GAAaC,gBAAb;MACAb,OAAO,CAACY,GAAD,EAAMC,gBAAN,EAAwBI,aAAxB,CAAP;MACA,IAAIJ,gBAAgB,CAACoB,MAAjB,KAA4B,CAAhC,EACI,OAAOtC,KAAK,CAACiB,GAAD,CAAZ;IACP,CAVD;IAWA,OAAOjB,KAAP;EACH;EACD;;;EACU,OAAH6B,GAAG,CAACe,GAAD,EAAMC,IAAN,EAAY;IAClB,OAAOC,MAAM,CAACC,mBAAP,CAA2BH,GAA3B,EAAgCf,GAAhC,CAAqCZ,GAAD,IAAS4B,IAAI,CAAC5B,GAAD,EAAM2B,GAAG,CAAC3B,GAAD,CAAT,CAAjD,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACyB,OAAdS,cAAc,CAAC1B,KAAD,EAAQ;IACzBA,KAAK,GAAG,KAAKwB,SAAL,CAAexB,KAAf,CAAR;IACA,OAAO8C,MAAM,CAACC,mBAAP,CAA2B/C,KAA3B,EAAkCgD,MAAlC,CAAyC,CAACtC,QAAD,EAAWO,GAAX,KAAmB;MAC/D,MAAMa,SAAS,GAAG9B,KAAK,CAACiB,GAAD,CAAvB;;MACA,IAAI,WAAWa,SAAf,EAA0B;QACtBpB,QAAQ,CAACO,GAAD,CAAR,GAAgBa,SAAS,CAACmB,KAAV,CAAgBpB,GAAhB,CAAqBqB,QAAD,IAAc;UAC9CA,QAAQ,CAAC,cAAD,CAAR,GAA2BA,QAAQ,CAAC,SAAD,CAAnC;UACA,OAAOA,QAAQ,CAAC,SAAD,CAAf;UACA,OAAOA,QAAQ,CAAC,cAAD,CAAf;UACA,OAAOA,QAAP;QACH,CALe,CAAhB;MAMH,CAPD,MAQK;QACDxC,QAAQ,CAACO,GAAD,CAAR,GAAgBa,SAAhB;MACH;;MACD,OAAOpB,QAAP;IACH,CAdM,EAcJ,EAdI,CAAP;EAeH;EACD;;;EACgB,OAATc,SAAS,CAACoB,GAAD,EAAM;IAClB,OAAOO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeT,GAAf,CAAX,CAAP;EACH;EACD;;;EACAxC,MAAM,CAACkD,QAAD,EAAW;IACb,KAAKnD,MAAL,CAAYC,MAAZ,GAAqBkD,QAArB;EACH;EACD;;;EACAjD,OAAO,CAACiD,QAAD,EAAW;IACd,KAAKnD,MAAL,CAAYE,OAAZ,GAAsBiD,QAAtB;EACH;EACD;;;EACAhD,MAAM,CAACgD,QAAD,EAAW;IACb,KAAKnD,MAAL,CAAYG,MAAZ,GAAqBgD,QAArB;EACH;EACD;;;EACAvC,kBAAkB,GAAG;IACjB,OAAO,CAAC,KAAKb,OAAN,IAAiB,KAAKA,OAAL,KAAiB,KAAKJ,OAAL,CAAaa,QAAb,EAAzC;EACH;;AAnNiC"},"metadata":{},"sourceType":"module"}